

# This file was *autogenerated* from the file generic_part_1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_10 = Integer(10); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_8 = Integer(8); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_0 = Integer(0)
import sys
import os 

current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

load_attach_path(parent)

load('preamble.sage')

# Construct generators for GL(5,F_2) acting on \bigvee^2 F_2^5
F = GF(_sage_const_2 )
G0 = SymmetricGroup(_sage_const_10 )
g1 = G0([(_sage_const_1 ,_sage_const_5 ,_sage_const_8 ,_sage_const_10 ,_sage_const_4 ),(_sage_const_2 ,_sage_const_6 ,_sage_const_9 ,_sage_const_3 ,_sage_const_7 )]).matrix().change_ring(F)
g2 = identity_matrix(F, _sage_const_10 )
g2[_sage_const_1 ,_sage_const_4 ] = _sage_const_1 
g2[_sage_const_2 ,_sage_const_5 ] = _sage_const_1 
g2[_sage_const_3 ,_sage_const_6 ] = _sage_const_1 
G = MatrixGroup([g1,g2])

# Construct an orbit lookup tree of depth 4 for the action of G on the dual of P^9
def apply_group_elem(g, x):
    x1 = g*x
    x1.set_immutable()
    return x1

def stabilizer(x):
    return vec_stab(Matrix(F, x), transpose=True)

def optimized_rep(g):
    return g.matrix()

def forbid(vecs, easy=False):
    return (Matrix(vecs).rank() < len(vecs))

methods = {'apply_group_elem': apply_group_elem,
           'stabilizer': stabilizer,
           'optimized_rep': optimized_rep,
           'forbid': forbid}

S = [x for x in VectorSpace(F, _sage_const_10 ) if x != _sage_const_0 ]
for x in S:
    x.set_immutable()
tree = build_orbit_tree(G, S, _sage_const_4 , methods, verbose=False)

H = GL(_sage_const_4 ,F)
gens = []
while H.subgroup(gens).order() != H.order():
    gens.append(H.random_element().matrix())

# Use the action of GL(4, F_2) to identify 4-tuples whose spans are G-equivalent
edges = []
for mats in green_nodes(tree, _sage_const_4 ):
    for g in gens:
        mats0 = tuple(sum(g[i,j]*mats[j] for j in range(_sage_const_4 )) for i in range(_sage_const_4 ))
        for v in mats0:
            v.set_immutable()
        mats1, g1 = orbit_rep_from_tree(G, tree, mats0, apply_group_elem, optimized_rep)
        edges.append((mats, mats1))

Gamma = Graph(edges, loops=True)
l = [cc[_sage_const_0 ] for cc in Gamma.connected_components(sort=False)]

with open("genus6-flats.txt", "w") as f:
    f.write(str(l))

