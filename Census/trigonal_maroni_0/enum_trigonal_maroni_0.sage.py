

# This file was *autogenerated* from the file enum_trigonal_maroni_0.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_3 = Integer(3); _sage_const_20 = Integer(20); _sage_const_6 = Integer(6)
import sys
import os 

current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

load_attach_path(parent)

load('preamble.sage')

# Construct the set of F_2-rational points of P_1 \times P_1
F = GF(_sage_const_2 )
P = PolynomialRing(F, _sage_const_4 , names=('x0', 'x1', 'y0', 'y1',)); (x0, x1, y0, y1,) = P._first_ngens(4)

S1 = [vector(t) for t in ProjectiveSpace(F,_sage_const_1 )]
for v in S1:
    v.set_immutable()
S = list(itertools.product(S1, S1))

# Construct the group GL(2, F_2) \times GL(2, F_2), presented as a subgroup of GL(4, F_2)
l0 = [block_matrix(_sage_const_2 ,_sage_const_2 ,[g.matrix(),_sage_const_0 ,_sage_const_0 ,identity_matrix(_sage_const_2 )], subdivide=False) for g in GL(_sage_const_2 ,F).gens()] +       [block_matrix(_sage_const_2 ,_sage_const_2 ,[identity_matrix(_sage_const_2 ),_sage_const_0 ,_sage_const_0 ,g.matrix()], subdivide=False) for g in GL(_sage_const_2 ,F).gens()]
G0 = GL(_sage_const_4 ,F).subgroup(l0)

# Use an orbit lookup tree to find GL(2, F_2)\times GL(2, F_2)-orbit representatives for 6-tuples of F_2 points in P_1\times P_1
def apply_group_elem(g, x):
    g1 = g.submatrix(nrows=_sage_const_2 ,ncols=_sage_const_2 )
    g2 = g.submatrix(row=_sage_const_2 ,col=_sage_const_2 )
    v1 = g1*x[_sage_const_0 ]
    v2 = g2*x[_sage_const_1 ]
    v1.set_immutable()
    v2.set_immutable()
    return (v1, v2) 

def stabilizer(x):
    G1 = vec_stab(Matrix(F, x[_sage_const_0 ]), transpose=True)
    G2 = vec_stab(Matrix(F, x[_sage_const_1 ]), transpose=True)
    l0 = [block_matrix(_sage_const_2 ,_sage_const_2 ,[g.matrix(),_sage_const_0 ,_sage_const_0 ,identity_matrix(_sage_const_2 )], subdivide=False) for g in G1.gens()] +         [block_matrix(_sage_const_2 ,_sage_const_2 ,[identity_matrix(_sage_const_2 ),_sage_const_0 ,_sage_const_0 ,g.matrix()], subdivide=False) for g in G2.gens()]
    return GL(_sage_const_4 , F).subgroup(l0)

def optimized_rep(g):
    return g.matrix()

methods = {'apply_group_elem': apply_group_elem,
           'stabilizer': stabilizer,
           'optimized_rep': optimized_rep}
tree = build_orbit_tree(G0, S, _sage_const_10 , methods, verbose=False)

# For each orbit representative of k-tuples with k=0,...,9, find (3,4)-curves passing through precisely those points

monos3 = [prod(x) for x in itertools.combinations_with_replacement([x0,x1],_sage_const_3 )]
monos4 = [prod(x) for x in itertools.combinations_with_replacement([y0,y1],_sage_const_4 )]
monos34 = [prod(x) for x in itertools.product(monos3, monos4)]

coords34 = {x: vector(F, (mu(*x[_sage_const_0 ], *x[_sage_const_1 ]) for mu in monos34)) for x in S}

def vec_to_gen(vec):
    return sum(vec[i]*monos34[i] for i in range(_sage_const_20 ))

curves = defaultdict(list)
perp = Matrix([coords34[x] for x in S])
for i in range(_sage_const_4 , _sage_const_10 ):
    for vecs in green_nodes(tree, i):
        target = vector(F, (_sage_const_0  if x in vecs else _sage_const_1  for x in S))
        for w in solve_right_iterator(perp, target):
            curves[(i,)].append(vec_to_gen(w))



# Close out the case
I1 = P.ideal([x0,x1])
I2 = P.ideal([y0, y1])
CR = magma.CoxRing(P, [I1, I2], [[_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ]], [])
proj = CR.ToricVariety()

with open("ss_trigonalmaroni0_1.txt", "w") as f:
    for i in range(_sage_const_4 ,_sage_const_10 ): 
        print('Handling curves with ', i, 'F_2 points')
        f.write('curves with ' + str(i) + ' F_2 points')
        lst = closeout(_sage_const_6 , curves[(i,)], X=proj)
        f.write(str(lst))

