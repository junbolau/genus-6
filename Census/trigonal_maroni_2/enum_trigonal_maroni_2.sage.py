

# This file was *autogenerated* from the file enum_trigonal_maroni_2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_20 = Integer(20)
import sys
import os 

current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

load_attach_path(parent)

load('preamble.sage')

# Construct the sets of F_2-rational points for a specific (2,1)-hypersurface X_1
# in P^1 X P^2 

F = GF(_sage_const_2 )
P = F['x0, x1, y0, y1, y2']; (x0, x1, y0, y1, y2,) = P._first_ngens(5)
gen1 = x0**_sage_const_2 *y0 + x0*x1*y1 + x1**_sage_const_2 *y2

S1 = [vector(t) for t in ProjectiveSpace(F, _sage_const_1 )]
S2 = [vector(t) for t in ProjectiveSpace(F, _sage_const_2 )]
for v in S1 + S2:
    v.set_immutable()
S0 = list(itertools.product(S1, S2))
S = [x for x in S0 if gen1(*x[_sage_const_0 ], *x[_sage_const_1 ]) == _sage_const_0 ]

# Construct a subgroup G0 of GL(2, F_2) X GL(3, F_2) fixing X_1
l0 = [Matrix(F,[[_sage_const_1 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ]]),
      Matrix(F,[[_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_0 ,_sage_const_0 ]])]
G0 = GL(_sage_const_5 ,F).subgroup(l0)

# Use an orbit lookup tree to find G0-orbit representatives for 6-tuples of F_2-points in X_1
def apply_group_elem(g, x):
    g1 = g.submatrix(nrows=_sage_const_2 ,ncols=_sage_const_2 )
    g2 = g.submatrix(row=_sage_const_2 ,col=_sage_const_2 )
    v1 = g1*x[_sage_const_0 ]
    v2 = g2*x[_sage_const_1 ]
    v1.set_immutable()
    v2.set_immutable()
    return (v1, v2)

assert all(apply_group_elem(g, x) in S for g in l0[:_sage_const_1 ] for x in S)

def stabilizer(x):
    G1 = vec_stab(Matrix(F, x[_sage_const_0 ]), transpose=True)
    G2 = vec_stab(Matrix(F, x[_sage_const_1 ]), transpose=True)
    l0 = [block_matrix(_sage_const_2 ,_sage_const_2 ,[g.matrix(),_sage_const_0 ,_sage_const_0 ,identity_matrix(_sage_const_3 )], subdivide=False) for g in G1.gens()] +         [block_matrix(_sage_const_2 ,_sage_const_2 ,[identity_matrix(_sage_const_2 ),_sage_const_0 ,_sage_const_0 ,g.matrix()], subdivide=False) for g in G2.gens()]
    return GL(_sage_const_5 , F).subgroup(l0)

def optimized_rep(g):
    return g.matrix()

methods = {'apply_group_elem': apply_group_elem,
           'stabilizer': stabilizer,
           'optimized_rep': optimized_rep}
tree = build_orbit_tree(G0, S, _sage_const_10 , methods, verbose=False)

monos13 = [prod(x) for x in itertools.product([prod(y) for y in itertools.combinations_with_replacement([x0,x1],_sage_const_1 )],
                                              [prod(y) for y in itertools.combinations_with_replacement([y0,y1,y2],_sage_const_3 )])]

coords13 = {x: vector(F, (mu(*x[_sage_const_0 ], *x[_sage_const_1 ]) for mu in monos13)) for x in S}

perp = Matrix([coords13[x] for x in S])
perp.set_immutable()
curves = defaultdict(list) 

for i in range(_sage_const_0 , _sage_const_10 ):
    for vecs in green_nodes(tree, i):
        target = vector(F, (_sage_const_0  if x in vecs else _sage_const_1  for x in S))
        for v2 in solve_right_iterator(perp, target):
            gen2 = sum(v2[j]*monos13[j] for j in range(_sage_const_20 ))
            curves[(i)].append((gen1, gen2))

print([(s, len(curves[s])) for s in curves])

